from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash
from datetime import datetime
from games.slots import Slots
from games.roulette import Roulette
from models import db, User, Transaction, GameConfig
from werkzeug.security import generate_password_hash, check_password_hash
from flask_socketio import SocketIO, emit, join_room, leave_room
import os
from functools import wraps
import json
import time
from games.crash import CrashGame
from typing import Optional
from games.mines import MinesGame
import random

app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(24)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///casino.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

socketio = SocketIO(app)

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# slots = Slots()
# roulette = Roulette()
# –£–¥–∞–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é pvp_game
# pvp_game = PvPGame()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Crash –∏–≥—Ä—ã
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –ø–æ SID
active_crash_games_by_sid = {}

# Store active mines games by SID
active_mines_games = {}

def create_new_crash_game_for_client(sid: str, user_id: int):
    # –ü–µ—Ä–µ–¥–∞–µ–º emit_callback, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç socketio.emit –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    def client_emit_callback(event, data, room=None):
        # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É (–≤–ª–∞–¥–µ–ª—å—Ü—É –∏–≥—Ä—ã)
        target_room = room if room is not None else sid
        #print(f"[CrashGame] Scheduling emit '{event}' to room {target_room}") # Added print
        socketio.start_background_task(
            emit, event, data, room=target_room
        )
        #print(f"[CrashGame] Emit background task scheduled for event '{event}' to room {target_room}.") # Added print

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –ø–µ—Ä–µ–¥–∞–µ–º user_id (–¥–ª—è –ª–æ–≥–∏–∫–∏ —Å—Ç–∞–≤–æ–∫) –∏ sid (–¥–ª—è —ç–º–∏—Ç–∞)
    new_game = CrashGame(client_emit_callback, sid)
    active_crash_games_by_sid[sid] = new_game
    print(f"[CrashGame] Created new game instance for SID {sid}.")
    return new_game

def get_crash_game_by_sid(sid: str) -> Optional[CrashGame]:
    return active_crash_games_by_sid.get(sid)

def get_user_mines_game(sid):
    if sid not in active_mines_games:
        # Pass the socketio instance to the MinesGame constructor
        active_mines_games[sid] = MinesGame(sid, lambda event, data: socketio.emit(event, data, room=sid), socketio)
    return active_mines_games[sid]

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
with app.app_context():
    db.create_all()
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    default_configs = [
        {'game_type': 'slots', 'config_data': {
            'SYMBOLS': ["üçí", "üçä", "üçã", "üçá", "7Ô∏è‚É£", "üíé"],
            'WEIGHTS': {
                'üçí': 30,
                'üçä': 25,
                'üçã': 20,
                'üçá': 15,
                '7Ô∏è‚É£': 7,
                'üíé': 3
            },
            'PAYOUTS': {
                'üçí': 2,
                'üçä': 3,
                'üçã': 4,
                'üçá': 5,
                '7Ô∏è‚É£': 10,
                'üíé': 20
            }
        }},
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä –∑–¥–µ—Å—å
        # {'game_type': 'roulette', 'config_data': {...}}
        # {'game_type': 'crash', 'config_data': {...}}
    ]
    
    for config_data in default_configs:
        if not GameConfig.query.filter_by(game_type=config_data['game_type']).first():
            new_config = GameConfig(
                game_type=config_data['game_type'],
                config_data=json.dumps(config_data['config_data'])
            )
            db.session.add(new_config)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    admin_user = User.query.filter_by(username='admin', is_admin=True).first()
    if not admin_user:
        admin_user = User(username='admin', is_admin=True)
        admin_user.set_password('admin') # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        db.session.add(admin_user)
        print("Admin user created with username 'admin' and password 'admin'")

    db.session.commit()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        user = None
        if 'user_id' in session:
            user = User.query.get(session['user_id'])
        if not user or not user.is_admin:
            flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞')
            return redirect(url_for('index')) # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫—É–¥–∞-—Ç–æ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        return f(*args, **kwargs)
    return decorated_function

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–±–ª–æ–Ω—ã
@app.context_processor
def inject_user():
    if 'user_id' in session:
        user = db.session.get(User, session['user_id'])
        return {'current_user': user}
    return {'current_user': None}

@app.route('/')
def index():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('index.html')

@app.route('/profile')
def profile():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user = db.session.get(User, session['user_id'])
    return render_template('profile.html', user=user)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if username and password:
            user = User.query.filter_by(username=username).first()
            if user and user.check_password(password):
                session['user_id'] = user.id
                return redirect(url_for('index'))
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        
        if not username or not password:
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
            return render_template('register.html')
        
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
            return render_template('register.html')
        
        if User.query.filter_by(username=username).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return render_template('register.html')
        
        user = User(username=username)
        user.set_password(password)
        db.session.add(user)
        db.session.commit()
        
        session['user_id'] = user.id
        return redirect(url_for('index'))
    
    return render_template('register.html')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('login'))

@app.route('/admin')
@admin_required
def admin_index():
    configs = GameConfig.query.all()
    return render_template('admin/index.html', configs=configs)

@app.route('/admin/config/<game_type>', methods=['GET', 'POST'])
@admin_required
def edit_game_config(game_type):
    config = GameConfig.query.filter_by(game_type=game_type).first()
    if not config:
        flash(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã {game_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', 'danger')
        return redirect(url_for('admin_index'))

    if request.method == 'POST':
        config_data_str = request.form.get('config_data')
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            json.loads(config_data_str)
            config.config_data = config_data_str
            db.session.commit()
            flash(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã {game_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success')
            return redirect(url_for('admin_index'))
        except json.JSONDecodeError:
            flash('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.', 'danger')
        except Exception as e:
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}', 'danger')
            db.session.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ

    return render_template('admin/edit_game_config.html', config=config)

@app.route('/admin/users')
@admin_required
def admin_users():
    users = User.query.all()
    return render_template('admin/users.html', users=users)

@app.route('/admin/users/<int:user_id>/balance', methods=['POST'])
@admin_required
def update_user_balance(user_id):
    user = db.session.get(User, user_id)
    if not user:
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'danger')
        return redirect(url_for('admin_users'))
    
    try:
        amount = float(request.form.get('amount', 0))
        action = request.form.get('action')
        
        if action == 'add':
            user.balance += amount
            transaction = Transaction(
                user_id=user.id,
                type='admin_add',
                amount=amount,
                game_type='admin'
            )
        elif action == 'subtract':
            if user.balance < amount:
                flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', 'danger')
                return redirect(url_for('admin_users'))
            user.balance -= amount
            transaction = Transaction(
                user_id=user.id,
                type='admin_subtract',
                amount=amount,
                game_type='admin'
            )
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', 'danger')
            return redirect(url_for('admin_users'))
        
        db.session.add(transaction)
        db.session.commit()
        flash(f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞', 'danger')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}', 'danger')
    
    return redirect(url_for('admin_users'))

@app.route('/play/slots', methods=['POST'])
def play_slots():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401

    user = db.session.get(User, session['user_id'])
    if not user:
        return jsonify({'error': 'User not found'}), 404

    data = request.json
    bet_amount = data.get('bet_amount')

    if not isinstance(bet_amount, (int, float)) or bet_amount <= 0:
        return jsonify({'error': 'Invalid bet amount'}), 400
    
    if user.balance < bet_amount:
        return jsonify({'error': 'Insufficient balance'}), 400
    
    slots = Slots(user)
    result = slots.play(bet_amount)
    
    print("Slots result:", result)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    if not result['success']:
        return jsonify({'error': result['message']}), 400
    
    if result['win_amount'] > 0:
        transaction = Transaction(
            user_id=user.id,
            type='win',
            amount=result['win_amount'],
            game_type='slots'
        )
    else:
        transaction = Transaction(
            user_id=user.id,
            type='loss',
            amount=bet_amount,
            game_type='slots'
        )
    
    db.session.add(transaction)
    db.session.commit()
    
    response_data = {
        'reels': result['result'],
        'win': result['win_amount'] > 0,
        'win_amount': result['win_amount'],
        'balance': result['balance'],
        'winning_lines': result['winning_lines']
    }
    print("Response data:", response_data)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    return jsonify(response_data)

@app.route('/play/roulette', methods=['POST'])
def play_roulette():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401

    user = db.session.get(User, session['user_id'])
    if not user:
         return jsonify({'error': 'User not found'}), 404

    data = request.json
    bet_type = data.get('bet_type')
    bet_amount = data.get('bet_amount')
    bet_value = data.get('bet_value')

    if not bet_type or not bet_amount or bet_amount <= 0:
        return jsonify({'error': 'Invalid bet data'}), 400

    if user.balance < bet_amount:
        return jsonify({'error': 'Insufficient balance'}), 400

    roulette = Roulette(user)
    result = roulette.play(bet_type, bet_amount, bet_value)

    if not result.get('success', False):
        return jsonify({'error': result.get('message', 'Game error')}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º win_amount –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    win_amount = result.get('win_amount', 0)
    if win_amount > 0:
        transaction_type = 'win'
        transaction_amount = win_amount
    else:
        transaction_type = 'loss'
        transaction_amount = bet_amount # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏

    transaction = Transaction(
        user_id=user.id,
        type=transaction_type,
        amount=transaction_amount,
        game_type='roulette'
    )
    db.session.add(transaction)
    db.session.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, –¥–æ–±–∞–≤–ª—è—è –∫–ª—é—á 'win'
    response_data = {
        'success': True,
        'result': result.get('result'), # –í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ
        'result_color': result.get('result_color'), # –í—ã–ø–∞–≤—à–∏–π —Ü–≤–µ—Ç
        'win_amount': win_amount,
        'balance': result.get('balance'),
        'win_description': result.get('win_description'),
        'win': win_amount > 0 # –î–æ–±–∞–≤–ª—è–µ–º –±—É–ª–µ–≤—ã–π –∫–ª—é—á 'win'
    }

    return jsonify(response_data)

@app.route('/slots')
def slots():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('games/slots.html')

@app.route('/roulette')
def roulette():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('games/roulette.html')

@app.route('/crash')
def crash():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('games/crash.html')

@app.route('/games/mines')
@login_required
def mines():
    return render_template('games/mines.html')

@app.route('/deposit/ad', methods=['POST'])
@login_required
def deposit_ad():
    if 'user_id' not in session:
        return jsonify({'success': False, 'message': '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'})
    
    user_id = session['user_id']
    with app.app_context():
        user = db.session.get(User, user_id)
        if not user:
            return jsonify({'success': False, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # Add 1000 to balance
        user.balance += 1000
        user.total_income += 1000  # Update total income
        
        # Create transaction record
        transaction = Transaction(
            user_id=user.id,
            type='deposit',
            amount=1000,
            game_type='ad',
            result='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã'
        )
        db.session.add(transaction)
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': '–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω',
            'balance': user.balance
        })

@app.route('/get_random_ad')
@login_required
def get_random_ad():
    ad_dir = os.path.join('static', 'ad')
    ad_files = [f for f in os.listdir(ad_dir) if f.endswith('.mp4')]
    if not ad_files:
        return jsonify({'success': False, 'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ'})
    
    random_ad = random.choice(ad_files)
    return jsonify({
        'success': True,
        'video_url': url_for('static', filename=f'ad/{random_ad}')
    })

# Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Crash –∏–≥—Ä—ã
@socketio.on('connect')
def handle_connect():
    sid = request.sid
    print(f'Client connected: {sid}')
    mines_game = get_user_mines_game(sid)
    mines_game.start_new_round()

@socketio.on('disconnect')
def handle_disconnect():
    sid = request.sid
    print(f'Client disconnected: {sid}')
    if sid in active_mines_games:
        active_mines_games[sid].stop_game()
        del active_mines_games[sid]

@socketio.on('place_bet')
def handle_place_bet(data):
    sid = request.sid
    print(f'[Mines] Received place_bet event from SID: {sid} with data: {data}')
    mines_game = get_user_mines_game(sid)
    
    if not mines_game:
        print(f'[Mines] No game instance found for SID: {sid}')
        socketio.emit('bet_response', {
            'success': False,
            'message': '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
        }, room=sid)
        return

    # If the game is in 'finished' state, start a new round before processing the bet
    if mines_game.game_state == 'finished':
        print(f'[Mines] SID {sid}: Game state is finished. Attempting to start new round...')
        mines_game.start_new_round()
        print(f'[Mines] SID {sid}: start_new_round() called. Current state after call: {mines_game.game_state}')

    try:
        if mines_game.game_state != 'betting':
             print(f'[Mines] SID {sid}: Game is NOT in betting state ({mines_game.game_state}). Emitting failure response.')
             socketio.emit('bet_response', {
                'success': False,
                'message': '–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç'
            }, room=sid)
             return

        bet_amount = float(data['bet_amount'])
        mines_count = int(data['mines_count'])
        print(f'[Mines] Parsed bet_amount: {bet_amount}, mines_count: {mines_count}')
        
        if bet_amount < 1:
            print(f'[Mines] Invalid bet amount: {bet_amount}')
            socketio.emit('bet_response', {
                'success': False,
                'message': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 1‚ÇΩ'
            }, room=sid)
            print(f'[Mines] Emitted bet_response (invalid amount) to SID: {sid}')
            return
        
        if mines_count not in [3, 5, 7]:
            print(f'[Mines] Invalid mines count: {mines_count}')
            socketio.emit('bet_response', {
                'success': False,
                'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω'
            }, room=sid)
            print(f'[Mines] Emitted bet_response (invalid mines) to SID: {sid}')
            return
        
        if 'user_id' not in session:
             socketio.emit('bet_response', {'success': False, 'message': '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.'}, room=sid)
             return
        
        user_id = session['user_id']
        with app.app_context():
            user = db.session.get(User, user_id)
            if not user:
                socketio.emit('bet_response', {'success': False, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'}, room=sid)
                return
            
            if user.balance < bet_amount:
                socketio.emit('bet_response', {'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.'}, room=sid)
                return

            # Deduct bet amount and create transaction
            user.balance -= bet_amount
            user.total_expense += bet_amount  # Update total expense
            db.session.add(user)
            transaction = Transaction(
                user_id=user.id,
                type='bet',
                amount=bet_amount,
                game_type='mines',
                result=f"–°—Ç–∞–≤–∫–∞ {bet_amount}‚ÇΩ –≤ –∏–≥—Ä–µ –°–∞–ø–µ—Ä ({mines_count} –º–∏–Ω)"
            )
            db.session.add(transaction)
            db.session.commit()
            print(f'[Mines] SID {sid} (User {user_id}): Bet of {bet_amount}‚ÇΩ deducted. New balance: {user.balance}‚ÇΩ')
            socketio.emit('balance_update', {'balance': user.balance}, room=sid)

        # Update mines count
        mines_game.mines_count = mines_count
        print(f'[Mines] Updated mines count for game SID: {sid} to {mines_game.mines_count}')
        
        # Place bet in game logic
        print(f'[Mines] Calling mines_game.place_bet for SID: {sid} with amount: {bet_amount}')
        bet_successful = mines_game.place_bet(bet_amount)
        print(f'[Mines] mines_game.place_bet returned: {bet_successful} for SID: {sid}')

        if bet_successful:
            socketio.emit('bet_response', {
                'success': True,
                'message': '–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞'
            }, room=sid)
            print(f'[Mines] Emitted bet_response (success) to SID: {sid}')
        else:
            socketio.emit('bet_response', {
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏'
            }, room=sid)
            print(f'[Mines] Emitted bet_response (error) to SID: {sid}')
    except Exception as e:
        print(f'[Mines] Error in handle_place_bet for SID {sid}: {str(e)}')
        socketio.emit('bet_response', {
            'success': False,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        }, room=sid)

@socketio.on('reveal_position')
def handle_reveal_position(data):
    sid = request.sid
    mines_game = get_user_mines_game(sid)
    
    if not mines_game:
        socketio.emit('reveal_response', {
            'success': False,
            'message': '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }, room=sid)
        return
    
    try:
        position = int(data['position'])
        result = mines_game.reveal_position(position)
        
        if result['success']:
            if result['win_amount'] > 0:
                # Update user's balance and total income
                user = db.session.get(User, session['user_id'])
                user.balance += result['win_amount']
                user.total_income += result['win_amount']  # Update total income
                db.session.commit()
                
                socketio.emit('balance_update', {
                    'balance': user.balance
                }, room=sid)
            
            socketio.emit('reveal_response', {
                'success': True,
                'position': position,
                'is_mine': result['is_mine'],
                'multiplier': result['multiplier'],
                'win_amount': result['win_amount']
            }, room=sid)
        else:
            socketio.emit('reveal_response', {
                'success': False,
                'message': result['message']
            }, room=sid)
    except Exception as e:
        print(f'Error in handle_reveal_position: {str(e)}')
        socketio.emit('reveal_response', {
            'success': False,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        }, room=sid)

@socketio.on('cashout')
def handle_cashout(data):
    sid = request.sid
    mines_game = get_user_mines_game(sid)
    
    if not mines_game:
        socketio.emit('cashout_response', {
            'success': False,
            'message': '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }, room=sid)
        return
    
    try:
        result = mines_game.cashout()
        
        if result['success']:
            # Update user's balance and total income
            user = db.session.get(User, session['user_id'])
            user.balance += result['win_amount']
            user.total_income += result['win_amount']  # Update total income
            db.session.commit()
            
            socketio.emit('balance_update', {
                'balance': user.balance
            }, room=sid)
            
            socketio.emit('cashout_response', {
                'success': True,
                'win_amount': result['win_amount'],
                'multiplier': result['multiplier']
            }, room=sid)
        else:
            socketio.emit('cashout_response', {
                'success': False,
                'message': result['message']
            }, room=sid)
    except Exception as e:
        print(f'Error in handle_cashout: {str(e)}')
        socketio.emit('cashout_response', {
            'success': False,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        }, room=sid)

if __name__ == '__main__':
    socketio.run(app, debug=True) 